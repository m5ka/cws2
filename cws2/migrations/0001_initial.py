# Generated by Django 4.1.7 on 2023-03-25 11:27

import cws2.validators
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.utils.timezone
import django_extensions.db.fields
import re


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "uuid",
                    django_extensions.db.fields.ShortUUIDField(
                        blank=True, editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        db_index=True,
                        help_text="This is the unique identifier you'll use to log in. It may only contain letters, numbers, hyphens, dashes and dots.",
                        max_length=64,
                        unique=True,
                        validators=[
                            cws2.validators.validate_username_length,
                            django.core.validators.RegexValidator(
                                re.compile("^[a-zA-Z0-9-_.]+\\Z"),
                                "Username may only contain letters, numbers, hyphens, underscores and dots.",
                                "invalid",
                            ),
                        ],
                        verbose_name="Username",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        help_text="This should be your email address. Make sure it's valid and that you have access to it.",
                        max_length=128,
                        unique=True,
                        verbose_name="Email address",
                    ),
                ),
                ("email_confirmed", models.BooleanField(default=False)),
                ("email_confirmed_at", models.DateTimeField(null=True)),
                (
                    "preferred_name",
                    models.CharField(
                        blank=True,
                        help_text="This name will appear instead of your username on the site, if set.",
                        max_length=64,
                        verbose_name="Display name",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
